package org.papervision3d.view {	import flash.display.BlendMode;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.ColorTransform;		import org.papervision3d.cameras.Camera3D;	import org.papervision3d.cameras.CameraType;	import org.papervision3d.cameras.DebugCamera3D;	import org.papervision3d.core.math.Matrix3D;	import org.papervision3d.core.proto.CameraObject3D;	import org.papervision3d.core.view.IView;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.scenes.Scene3D;			public class AnaglyphView extends Sprite implements IView {		protected var _camera : Camera3D;				protected var _viewportLeft  : Viewport3D;		protected var _viewportRight : Viewport3D;				private var rightColorTransform : ColorTransform;				public var scene	: Scene3D;		public var renderer	: BasicRenderEngine;				private var _anaglyph 	 : Boolean;		private var _stereoWidth : Number;				//for caching		private var __cameraMatrix : Matrix3D;				public function AnaglyphView(anaglyph:Boolean = true, stereoWidth:Number = 10, viewportWidth:Number = 640, viewportHeight:Number = 480, scaleToStage:Boolean = true, interactive:Boolean = false, cameraType:String = "Target")		{			scene = new Scene3D();			renderer = new BasicRenderEngine();						_viewportRight = new AnaglyphViewport3D(viewportWidth, viewportHeight, scaleToStage, interactive, true, true);			_viewportRight.cacheAsBitmap = true;			addChild(_viewportRight);						_viewportLeft = new AnaglyphViewport3D(viewportWidth, viewportHeight, scaleToStage, false, true, true);			_viewportLeft.cacheAsBitmap = true;			_viewportLeft.transform.colorTransform = new ColorTransform(1 , 0 , 0 , 1);			_viewportLeft.blendMode = BlendMode.SCREEN;			_viewportLeft.mouseEnabled = false;			_viewportLeft.mouseChildren = false;			addChild(_viewportLeft);						rightColorTransform = new ColorTransform(0 , 1 , 1 , 1);						_stereoWidth = stereoWidth;						switch(cameraType)			{				case CameraType.DEBUG:					_camera = new DebugCamera3D(_viewportRight);					break;				case CameraType.TARGET:					_camera = new Camera3D(60);					_camera.target = DisplayObject3D.ZERO;					break;				case CameraType.FREE:				default:					_camera = new Camera3D(60);					break;			}						_camera.update(_viewportRight.sizeRectangle);						__cameraMatrix = new Matrix3D();						this.anaglyph = anaglyph;		}				public function startRendering():void		{			addEventListener(Event.ENTER_FRAME, onRenderTick);			_viewportRight.containerSprite.cacheAsBitmap = _viewportLeft.containerSprite.cacheAsBitmap = false;		}				public function stopRendering(reRender:Boolean = false, cacheAsBitmap:Boolean = false):void		{			removeEventListener(Event.ENTER_FRAME, onRenderTick);			if(reRender){				onRenderTick();				}			_viewportRight.containerSprite.cacheAsBitmap = _viewportLeft.containerSprite.cacheAsBitmap = cacheAsBitmap;		}				public function singleRender():void		{			onRenderTick();		}						protected function onRenderTick(event:Event = null):void		{			if(!_anaglyph) {				renderer.renderScene(scene, _camera, _viewportRight);			}			else {				__cameraMatrix.copy(_camera.transform);								_camera.moveLeft(_stereoWidth / 2);				renderer.renderScene(scene, _camera, _viewportLeft);				_camera.transform.copy(__cameraMatrix);				_camera.moveRight(_stereoWidth / 2);				renderer.renderScene(scene, _camera, _viewportRight);				_camera.transform.copy(__cameraMatrix);			}		}				public function set anaglyph(value:Boolean) : void 		{			_anaglyph = value;			_viewportLeft.visible = value;			_viewportRight.transform.colorTransform = value ? rightColorTransform : new ColorTransform();		}				public function get anaglyph() : Boolean 		{			return _anaglyph;		}				public function get camera():CameraObject3D		{			return _camera;		}				public function get cameraAsDebugCamera3D() : DebugCamera3D 		{			if(_camera is DebugCamera3D)				return _camera as DebugCamera3D;			else {				trace("camera is not a DebugCamera3D");				return null;			}		}				public function get stereoWidth() : Number 		{			return _stereoWidth;		}				public function set stereoWidth(stereoWidth : Number) : void 		{			_stereoWidth = stereoWidth;		}				public function get viewportLeft() : Viewport3D {			return _viewportLeft;		}				public function get viewportRight() : Viewport3D {			return _viewportRight;		}	}}